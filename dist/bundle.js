(()=>{"use strict";var t;!function(t){t.ADD_TASK="ADD_TASK",t.TOOGLE_TASK="TOOGLE_TASK",t.REMOVE_TASK="REMOVE_TASK"}(t||(t={}));let e=((t,e)=>{const s=localStorage.getItem(t)||sessionStorage.getItem(t);return s?JSON.parse(s):e})("STORE",{tasks:[]}),s=[];const a=a=>{const o=((e,s)=>{const{action:a,payload:o}=e;switch(a){case t.ADD_TASK:return Object.assign(Object.assign({},s),{tasks:[...s.tasks,o]});case t.REMOVE_TASK:return Object.assign(Object.assign({},s),{tasks:s.tasks.filter((t=>t.id!==o))});case t.TOOGLE_TASK:return Object.assign(Object.assign({},s),{tasks:s.tasks.map((t=>t.id===o?Object.assign(Object.assign({},t),{state:!t.state}):t))});default:return s}})(a,JSON.parse(JSON.stringify(e)));e=o,s.forEach((t=>t.render())),((t,e,s=!1)=>{const a=s?sessionStorage:localStorage,o=JSON.stringify(e);a.setItem(t,o)})("STORE",o)},o=t=>{s=[...s,t]};class n extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.render()}render(){var s;this.shadowRoot&&(this.shadowRoot.innerHTML='\n           <h1>Tasks</h1>\n           <form class="task-form">\n           <input type="text" id="task-input" placeholder="Task name" required>\n           <button type="submit" id="add-button">Agregar</button>\n           </form>\n           \n           '),(null===(s=this.shadowRoot)||void 0===s?void 0:s.querySelector(".task-form")).addEventListener("submit",(s=>{var o;s.preventDefault();const n=(null===(o=this.shadowRoot)||void 0===o?void 0:o.querySelector("#task-input")).value,i={id:Date.now(),title:n,state:!1};var r;a((r=i,{action:t.ADD_TASK,payload:r})),console.log(e)}))}}var i;customElements.define("task-form",n),function(t){t.uid="uid",t.tasktitle="tasktitle",t.state="state"}(i||(i={}));class r extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),o(this)}static get observedAttributes(){return Object.keys({uid:null,tasktitle:null,state:null})}connectedCallback(){this.render()}attributeChangeCallback(t,e,s){switch(t){case i.uid:this.uid=s?Number(s):void 0;break;case i.state:this.state=s?"true"===s:void 0;break;default:this[t]=s}this.render()}render(){var e,s;this.shadowRoot&&(this.shadowRoot.innerHTML=`\n        <article>\n        <h3>${this.getAttribute("tasktitle")}</h3>\n        <input type="checkbox" ${this.getAttribute("state")}? 'checked':''} class="check-task"/>\n        <button class="remove-button">Eliminar</button>\n        </article>\n        `),(null===(e=this.shadowRoot)||void 0===e?void 0:e.querySelector(".remove-button")).addEventListener("click",(()=>{const e=Number(this.getAttribute("uid"));var s;a((s=e,{action:t.REMOVE_TASK,payload:s}))})),(null===(s=this.shadowRoot)||void 0===s?void 0:s.querySelector(".check-task")).addEventListener("change",(()=>{const e=Number(this.getAttribute("uid"));var s;a((s=e,{action:t.TOOGLE_TASK,payload:s}))}))}}customElements.define("task-item",r);class c extends HTMLElement{constructor(){super(),this.taskitems=[],this.attachShadow({mode:"open"}),o(this),console.log("appstate",e.tasks),null!=e.tasks&&e.tasks.forEach((t=>{const e=this.ownerDocument.createElement("task-item");e.setAttribute(i.uid,t.id),e.setAttribute(i.tasktitle,t.title),e.setAttribute(i.state,t.state),this.taskitems.push(e)}))}connectedCallback(){this.render()}render(){this.shadowRoot&&this.taskitems.forEach((t=>{var e;null===(e=this.shadowRoot)||void 0===e||e.appendChild(t)}))}}customElements.define("task-list",c);class d extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),o(this)}connectedCallback(){console.log(e),console.log(e.tasks),this.render()}render(){this.shadowRoot&&(this.shadowRoot.innerHTML="\n        <task-form></task-form>\n        <task-list></task-list>\n        ")}}customElements.define("app-container",d)})();